<?php
/**
* autoGenerated on 2011-10-31
* @package models
* @subpackage
* @class BASE_userRightDomains
* @property userRightsCollection $userRights
* @method $this appendUserRights()
* @method userRights appendNewUserRights()
* @method $this setUserRightsCollection()
* @method userRightsCollection getUserRights() @see getRelated() methods for more infos
* @method userRightsCollection getFilteredUserRights($propertyName,$exp,$comparisonOperator=null) sort of $this->getRelated()->getFilteredBy() trying to be optimized
*/
class BASE_userRightDomains extends abstractModel{

	protected $datas = array(
		'domainId' => 0, //int(11)
		'name' => '', //varchar(255)
	);

	static protected $filters = array();

	static protected $hasOne = array(
		// 'relName'=> array('modelName'=>'modelName','relType'=>'ignored|dependOn|requireBy',['localField'=>'fldNameIfNotPrimaryKey','foreignField'=>'fldNameIfNotPrimaryKey','foreignDefault'=>'ForeignFieldValueOnDelete'])
	);
	static protected $hasMany = array(
		//   'relName'=> array('modelName'=>'modelName','relType'=>'ignored|dependOn|requireBy','foreignField'=>'fieldNameIfNotPrimaryKey'[,'localField'=>'fieldNameIfNotPrimaryKey','foreignDefault'=>'ForeignFieldValueOnDelete','orderBy'=>'orderBy'=>'fieldName [asc|desc][,fieldName [asc|desc],...]']),
		//or 'relName'=> array('modelName'=>'modelName','linkTable'=>'tableName','linkLocalField'=>'fldName','linkForeignField'=>'fldName','relType'=>'ignored|dependOn|requireBy',['orderBy'=>'fieldName [asc|desc][,fieldName [asc|desc],...]']),
		'userRights' => array(
			'modelName'=>'userRights',
			'foreignField'=>'userRightDomain',
			'relType'=>'requiredBy',
		),
	);

	/** database link */
	static protected $dbConnectionDescriptor = DB_CONNECTION;
	protected $dbAdapter = null;

	static protected $modelName = 'BASE_userRightDomains';
	static protected $tableName = 'userRightDomains';
	static protected $primaryKey = 'domainId';

	/**
	* field information about type, default values and so on
	*/
	static protected $datasDefs = array(
		'domainId' => array('Type'=>'int(11)', 'Extra'=>'auto_increment', 'Null' =>'NO', 'Key' =>'PRI', 'Default'=>0),
		'name' => array('Type'=>'varchar(255)', 'Extra'=>'', 'Null' =>'NO', 'Key' =>'', 'Default'=>''),
	);

	static public function getNew(){
		return abstractModel::getModelInstance('userRightDomains');
	}

	static public function getInstance($PK=null){
		return abstractModel::getModelInstance('userRightDomains',$PK);
	}
	static public function getMultipleInstances(array $PKs){
		return abstractModel::getMultipleModelInstances('userRightDomains',$PKs);
	}
	static public function getFilteredInstances($filter=null){
		return abstractModel::getFilteredModelInstances('userRightDomains',$filter);
	}
	static public function getFilteredInstance($filter=null){
		return abstractModel::getFilteredModelInstance('userRightDomains',$filter);
	}
	static public function getFilteredInstancesByField($field,$filterType,$args=null){
		return abstractModel::getFilteredModelInstancesByField('userRightDomains',$field,$filterType,$args);
	}
	static public function getInstanceFromDatas($datas,$dontOverideIfExists=false,$bypassFilters=false){
		return abstractModel::getModelInstanceFromDatas('userRightDomains',$datas,$dontOverideIfExists,$bypassFilters);
	}
	static public function getAllInstances($withRelated=null,$orderedBY=null){
		return abstractModel::getAllModelInstances('userRightDomains',$withRelated,$orderedBY);
	}
	static public function getPagedInstances($filter=null,$pageId=1,$pageSize=10,$withRelated=null){
		return abstractModel::getPagedModelInstances('userRightDomains',$filter,$pageId,$pageSize,$withRelated);
	}
	static public function _setPagedNav(array $sliceAttrs=null){
		return abstractModel::_setModelPagedNav('userRightDomains',$sliceAttrs);
	}
	static public function _getSupportedAddons(){
		return abstractModel::_modelGetSupportedAddons('userRightDomains');
	}
	static public function _supportsAddon($modelAddon,$caseInsensitive=false){
		return abstractModel::_modelGetSupportedAddons('userRightDomains',$modelAddon,$caseInsensitive);
	}
	static public function getCount($filter=null){
		return abstractModel::getModelCount('userRightDomains',$filter);
	}

	/**
	* permit to access static dynamic methods such as getByFieldnameLessThan for php >= 5.3
	* where fieldName is a modelName::$datas key
	* (will work like this: modelName::getByFieldnameLessThan($value));
	* In the time waiting for this to be handled in future version of php (at this time latest stable release is still 5.2)
	* we can use it like this: modelName::__callstatic('getByFieldnameLessThan',array($value))
	* (with late stating binding enable we should move this to abstractModel and replace '$modelName' by static)
	*/
	static public function __callstatic($m,$a){
		#- manage common filter getter
		if(preg_match('!getBy('.implode('|',array_keys(self::$datasDefs)).')((?:(?:Less|Greater)(?:Equal)?Than)|Between|(?:Not)?(?:Null|Equal|Like|In))$!',$m,$match)){
			return call_user_func('abstractModel::getFilteredModelInstancesByField','userRightDomains',$match[1],$match[2],$a);
		}
	}
	/**
	* return a static property of the model (even protected).
	* @param string $propName name of the static property to retrieve.
	* @return mixed
	*/
	static public function _getStatic($propName){
		return abstractModel::_getModelStaticProp('userRightDomains',$propName);
	}
	static public function _setDbConnectionDescriptor($descriptor,$detach=false){
		self::$dbConnectionDescriptor = $descriptor;
		if( $detach){
			abstractModel::getModelLivingInstances('userRightDomains')->detach();
		}
	}
	static public function _getDbAdapter(){
		return abstractModel::getModelDbAdapter('userRightDomains');
	}
	static public function hasRelDefs($relType=null,$returnDef=false){
		return abstractModel::modelHasRelDefs('userRightDomains',$relType,$returnDef);
	}
}
